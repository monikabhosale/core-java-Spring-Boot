The IoC Container
This chapter covers Spring’s Inversion of Control (IoC) container.
Introduction to the Spring IoC Container and Beans
This chapter covers the Spring Framework implementation of the Inversion of Control (IoC) principle. 
Dependency injection (DI) is a specialized form of IoC, whereby objects define their dependencies (that is, 
the other objects they work with) only through constructor arguments, arguments to a factory method, or properties 
that are set on the object instance after it is constructed or returned from a factory method. The IoC container 
then injects those dependencies when it creates the bean. This process is fundamentally the inverse (hence the name, 
Inversion of Control) of the bean itself controlling the instantiation or location of its dependencies by 
using direct construction of classes or a mechanism such as the Service Locator pattern.

The org.springframework.beans and org.springframework.context packages are the basis for Spring Framework’s IoC container. 
The BeanFactory interface provides an advanced configuration mechanism capable of managing any type of object. 
ApplicationContext is a sub-interface of BeanFactory. It adds:

Easier integration with Spring’s AOP features

Message resource handling (for use in internationalization)

Event publication

Application-layer specific contexts such as the WebApplicationContext for use in web applications.

In short, the BeanFactory provides the configuration framework and basic functionality, and 
the ApplicationContext adds more enterprise-specific functionality. The ApplicationContext is 
a complete superset of the BeanFactory and is used exclusively in this chapter in descriptions of Spring’s IoC container. 
For more information on using the BeanFactory instead of the ApplicationContext, see the section covering the BeanFactory API.

In Spring, the objects that form the backbone of your application and that are managed by the Spring IoC container are called beans.
 A bean is an object that is instantiated, assembled, and managed by a Spring IoC container. Otherwise, a bean is simply one of many objects 
in your application. Beans, and the dependencies among them, are reflected in the configuration metadata used by a container.
*****************************************************************************************************************************************************************
Container Overview
The org.springframework.context.ApplicationContext interface represents the Spring IoC container and is responsible for instantiating, configuring, and assembling the beans.
 The container gets its instructions on the components to instantiate,
 configure, and assemble by reading configuration metadata. The configuration metadata can be represented as annotated component classes, configuration classes
 with factory methods, or external XML files or Groovy scripts. With either format, you may compose your application and the rich interdependencies between those components.

Several implementations of the ApplicationContext interface are part of core Spring. In stand-alone applications, it is common to create an instance of
 AnnotationConfigApplicationContext or ClassPathXmlApplicationContext.

In most application scenarios, explicit user code is not required to instantiate one or more instances of a Spring IoC container. For example, in 
a plain web application scenario, a simple boilerplate web descriptor XML in the web.xml file of the application suffices (see Convenient ApplicationContext
 Instantiation for Web Applications). In a Spring Boot scenario, the application context is implicitly bootstrapped for you based on common setup conventions.

The following diagram shows a high-level view of how Spring works. Your application classes are combined with configuration metadata so that, after
 the ApplicationContext is created and initialized, you have a fully configured and executable system or application.
*************************************************************************************************************************************************************************

Configuration Metadata
As the preceding diagram shows, the Spring IoC container consumes a form of configuration metadata. 
This configuration metadata represents how you, as an application developer, tell the Spring container to instantiate, 
configure, and assemble the components in your application.

The Spring IoC container itself is totally decoupled from the format in which this configuration metadata is actually written. 
These days, many developers choose Java-based configuration for their Spring applications:

Annotation-based configuration: define beans using annotation-based configuration metadata on your application’s component classes.

Java-based configuration: define beans external to your application classes by using Java-based configuration classes. 
To use these features, see the @Configuration, @Bean, @Import, and @DependsOn annotations.

Spring configuration consists of at least one and typically more than one bean definition that the container must manage. 
Java configuration typically uses @Bean-annotated methods within a @Configuration class, each corresponding to one bean definition.

These bean definitions correspond to the actual objects that make up your application.
 Typically, you define service layer objects, persistence layer objects such as repositories or data access objects (DAOs),
 presentation objects such as Web controllers, infrastructure objects such as a JPA EntityManagerFactory, JMS queues, and so forth. 
Typically, one does not configure fine-grained domain objects in the container, because it is usually the responsibility of repositories 
and business logic to create and load domain objects.
